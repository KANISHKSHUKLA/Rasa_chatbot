import streamlit as st
import requests
import google.generativeai as genai
import os

# Configure the Gemini API
GENAI_API_KEY = os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=GENAI_API_KEY)

# Streamlit app configuration
st.set_page_config(page_title="Rasa + Gemini Chatbot", layout="wide")

st.title("ü§ñ Rasa + Gemini Chatbot")

# Chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Rasa endpoint
RASA_ENDPOINT = "http://localhost:5005/webhooks/rest/webhook"

# Function to send user input to Rasa and get a response
def get_rasa_response(user_input):
    try:
        # Rasa POST request
        payload = {"sender": "user", "message": user_input}
        response = requests.post(RASA_ENDPOINT, json=payload)
        rasa_responses = response.json()

        if rasa_responses:
            rasa_reply = rasa_responses[0].get("text", "No response from Rasa.")
        else:
            rasa_reply = "Sorry, I couldn't process that."

        return rasa_reply
    except Exception as e:
        return f"Error connecting to Rasa: {str(e)}"

# Function to generate a Gemini-enhanced response
# def get_gemini_response(context):
#     try:
#         model = genai.GenerativeModel("gemini-1.5-flash")
#         prompt = f"Provide a helpful response to this query: {context}"
#         response = model.generate_content(prompt)
#         if response and hasattr(response, "text"):
#             return response.text
#         return "Sorry, no response generated by Gemini."
#     except Exception as e:
#         return f"Error using Gemini: {str(e)}"

# User input form
with st.form("chat_form", clear_on_submit=True):
    user_input = st.text_input("Type your message:", "")
    submit = st.form_submit_button("Send")

if submit and user_input:
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "text": user_input})

    # Get Rasa response
    rasa_response = get_rasa_response(user_input)

    # Optionally, augment with Gemini
    # gemini_response = get_gemini_response(user_input)

    # Combine responses (customize this logic as needed)
    # final_response = f"Rasa: {rasa_response}\n\nGemini: {gemini_response}"

    # Add bot response to chat history
    st.session_state.messages.append({"role": "bot", "text": rasa_response})

# Display chat history
for msg in st.session_state.messages:
    if msg["role"] == "user":
        st.markdown(f"*You:* {msg['text']}")
    else:
        st.markdown(f"*Bot:* {msg['text']}")

# Footer
st.markdown("---")
st.markdown("Built with ‚ù§ by Aditya & Kanishk")